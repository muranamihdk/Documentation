<?xml version="1.0" encoding="utf-8"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_lite.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_lite.rng" type="application/xml"
	schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>TEI ガイドラインとスタイルシートをビルドしてテストする</title>
        <author>Hugh Cayless</author>
      </titleStmt>
      <publicationStmt>
        <publisher>TEI 技術評議会</publisher>
        <date>2016</date>
      </publicationStmt>
      <sourceDesc>
        <p>この文書は電子版が原本（ボーン・デジタル）である。</p>
      </sourceDesc>
    </fileDesc>
  </teiHeader>
  <text>
    <body>
      <div>
        <head>ガイドラインとスタイルシートをビルドしてテストする方法</head>
        <p>Getting set up to run the various building and testing targets in the Guidelines and
          Stylesheets is relatively easy in Debian-based Linuxes like Ubuntu. But it is quite tricky on
          other systems, like Mac OS X or Windows. The TEI Jenkins server will run a variety of
          builds when you push changes to the TEI or Stylesheets repos, but you may find you prefer
          to run the tests locally, as they will likely be faster and will save you the trouble of
          waiting for Jenkins to email you when it finds a problem. Moreover, if you’re doing work
          in a branch, Jenkins won’t help you at all, and it can be very useful to “check your work”
          as you go to avoid lots of bug-fixing when your merge back into dev.</p>
        <p>自分用の開発・テスト環境を構築するための第一歩は、TEI および Stylesheet リポジトリのコピーを入手することです。これらは <ptr target="https://github.com/TEIC/TEI"/> と <ptr target="https://github.com/TEIC/Stylesheets"/> からそれぞれ入手することができます。ここから先の手順説明はすべて、少なくともある程度コマンドラインでの作業に慣れているものと仮定しています。そうでないならばこれが学ぶよい機会かもしれません。Mac に偏ったチュートリアルですが “<ref target="https://www.learnenough.com/command-line-tutorial">Learn Enough Command Line to Be Dangerous</ref>” があります。Windows 10 ユーザなら “<ref target="http://www.howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/">How to Install and Use the Linux Bash Shell on Windows 10</ref>” で Bash シェルのインストール方法とその使い方の基本を学ぶことができるでしょう。さてターミナルのウィンドウを開いたら、次のコマンドで TEI のリポジトリを複製することができます。<lb/><code>git clone git@github.com:TEIC/TEI.git</code>  <lb/><code>git clone git@github.com:TEIC/Stylesheets.git</code></p>
        <p>It’s probably a good idea to keep these side-by-side. I put mine in a directory called:
            <code>/Users/hcayless/Development/TEIC</code>. As you will see, it’s a good idea to do
          this somewhere under the Users directory, whether you’re on Mac or Windows. If you’re
          running Ubuntu or some other Linux, you can put them where you like. Let’s assume you’ve
          got working copies of the TEI and Stylesheets repos, and that you’ve made some changes
          you’d like to test before you push them back up to GitHub and make them available to
          everyone. The TEI has set up a pre-built test environment in Docker that you can use.
          First, you should get Docker Community Edition (CE). On a Mac, go to <ptr target="https://docs.docker.com/v17.12/docker-for-mac/install/"/>, on Windows, <ptr target="https://docs.docker.com/v17.12/docker-for-windows/install/"/>, and on Linux, choose your specific platform here: <ptr target="https://docs.docker.com/v17.12/install/"/>. Follow Docker’s “Get Started” instructions for your installation to configure Docker and include the TEI repositories in your Docker container. Once you have Docker
          installed and set up, you can run <lb/><code>docker pull teic/teidev-docker</code>
          <lb/>to grab a copy of the pre-built image.</p>
        <p>Now you’re ready to run your test environment. You’ll need a couple of pieces of
          information for Docker: the location of your repositories and your timezone. You can look up your timezone at <ref target="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">Wikipedia</ref>.
          You need it because the default timezone of the container is UTC, which will lead to
          strange warnings when you run the builds unless you actually happen to be in sync with
          UTC, because the local time of your computer will differ from that set in the container.
          The directory containing your repositories will be mapped to a directory in the container
          (which is why it’s easier to put them side-by-side). You’ll run the test container with a
          command like: 
          <lb/><code>docker run --name tei -v /Users/hcayless/Development/TEIC:/tei -it -e TZ=America/New_York
            teic/teidev-docker</code>
          <lb/>which will put you in a Bash shell inside the container (named 'tei'), at the root directory.
          The directory on your local file system where you cloned the TEI and
          Stylesheets repos is mapped to <code>/tei</code> in the container (that’s the part after
          <code>-v</code> above). If you then do <code>cd tei</code> and then <code>ls</code>, you
          should  see the repos you cloned above. There’s one more piece of work to be done, and
          that’s  to tell the Guidelines build process where it can find your copy of the
          Stylesheets.  You do that by adding a <code>local.mk</code> file in <code>TEI/P5</code>.
          So,  (from <code>/tei</code>) do <code>cd TEI/P5</code> and then 
          <code>echo "XSL=/tei/Stylesheets" &gt; local.mk</code>. Now
          you can build things! And, what’s more, you can work on the Guidelines and Stylesheets in
          your regular environment, and test them in Docker. The Docker command above will create a
          container named “tei”, which you can return to later. Because it runs a Bash terminal, you
          can exit it by typing <code>exit</code> at the command prompt, and that will stop the 
          container. You can restart it with a command like <code>docker start -ai tei</code>, which
          will start the container and attach your terminal to it, with whatever state it was in
          when you left it. You may want to alias a simple command like <code>teidocker</code> to 
          <code>docker start -ai tei</code>.
        </p>
        <p>たとえば、HTMLバージョンのガイドラインを作成するには、（<code>/tei/TEI/P5</code> で）<code>make html-web</code> を実行します。プロセスが終了すると、P5 ディレクトリに "Guidelines-web" という名前のディレクトリが作成されています。Docker シェルの外でこのフォルダを開き、index.html ファイルを見つけてブラウザで開くことができます。“Make” は一般的にはプログラムのコンパイルに使われるプログラムですが、ここで使われているように、一種のバッチスクリプト全般用ツールとしても役に立ちます。通常 Guidelines リポジトリでは、<code>P5/</code> ディレクトリで Make を実行します。Stylesheets リポジトリでは、リポジトリのトップディレクトリ（<code>Stylesheets/</code>）で実行します。また、<code>Makefile</code> を含むディレクトリであればどこでも Make を実行することが可能です。ターゲットは異なる場合があることに注意してください。<code>Stylesheets/Test</code> の中で <code>make</code> を実行することと、その一つ上の階層で <code>make test</code> を実行することは、ほとんど同一です。もしトラブルの解決のために特に行いたいテストセットがあれば、そのテストターゲットだけを独立に行うことも可能です（例えば ODD 変換メソッドをテストするには、<code>Stylesheets/Test</code> で <code>make test-oddity</code> を実行します）。すべてのターゲットは <code>Makefile</code> の中で定義されています。</p>
        <p>ドキュメント <ref target="http://www.tei-c.org/Guidelines/P5/get.xml">Using the TEI GitHub
          Repository</ref> には、実行可能なプロセスについてより詳細な説明が—そしてそれを実行するための環境構築についてはごく貧弱な情報が—あります。しかし単純にそれらは全部無視してください。そこで列挙されている <code>make</code> ターゲットの他に、TEI と Stylesheets の両方のリポジトリには、GitHub にプッシュした際に Jenkins で実行される <code>make test</code> ターゲットがあります。これらはいずれも、プッシュする前にコードを確認するための優れた方法です。これらのターゲットを実行すると、いずれの場合でも Make はたくさんのことを行いますが、それらすべてにおいて最後は “BUILD SUCCESSFUL” のメッセージで終わらなければなりません。何か問題がある場合は、うまくいけば何が悪いかの何らかの指摘とともに、失敗のメッセージが表示されます。一度ビルドターゲットを実行した後は、再度ビルドする前には <code>make clean</code> を実行して、前回のビルドで生成されたファイルが次の実行時に干渉しないよう、確実を期した方がおそらくはよいでしょう（Make は一度行われたことは繰り返さないようにするので、もしビルドの生成物が残されているのを見つけた時は、それを再度ビルドすることはしません）。ターゲットはひとまとめにすることができますので、<code>make clean test</code> と実行すれば、前回の残存物の除去を行ってから、テストターゲットを実行します。</p>
        <p>テストやその他ビルドなどターゲットを実行すると、大量のテキストが出力されるのを目にすることになりますが、それらのほとんどは無視してよいものです。もしいずれかのプロセスでエラーが発生したら、Make は実行を停止するはずですので、ターミナルの最後に出力されているテキストが、何が起こったかを語っているはずです。このメッセージがあまり役に立たないこともありえますが、その場合は Make が実行していたコマンドを特定し、このコマンドを自分で実行して、エラーメッセージを確認する必要があるでしょう。Stylesheets リポジトリでは、エラーはしばしば、あるテストの実際の出力が、期待する出力とは違う、という形をとります。この場合のテストの失敗は、必ずしもエラーであるとは限りません。もし ODD のコンパイルやスキーマの生成に何か変更を加えていた場合は、新しい出力が正しいかもしれませんが、古いものとは一致しないでしょう。この問題が発生した場合は、<code>Test/</code> ディレクトリの新しい出力を、<code>Test/expected-results</code> にコピーすることができます。もちろん、新しい出力が本当に正しいのかについては、いささか慎重になる必要があります。というのも、もし本当にはそれが機能していなくても、今度はテストにパスしてしまうからです。なぜならテストで確認されているのは、テストでの出力が、事前に想定された出力と同じかどうかだけだからです。</p>
        <p>ではテストを楽しんでください。幸運を祈ります！</p>
      </div>
    </body>
  </text>
</TEI>
