<?xml version="1.0" encoding="utf-8"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_lite.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_lite.rng" type="application/xml"
	schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>TEI ガイドラインとスタイルシートをビルドしてテストする</title>
        <author>Hugh Cayless</author>
      </titleStmt>
      <publicationStmt>
        <publisher>TEI 技術評議会</publisher>
        <date>2016</date>
      </publicationStmt>
      <sourceDesc>
        <p>この文書は電子版が原本（ボーン・デジタル）である。</p>
      </sourceDesc>
    </fileDesc>
  </teiHeader>
  <text>
    <body>
      <div>
        <head>ガイドラインとスタイルシートをビルドしてテストする方法</head>
        <p>ガイドラインとスタイルシートを色々とビルドしてテストするための環境を用意するのは、Ubuntu などの Debian Linux では比較的簡単です。しかし Mac OS X や Windows といったそれ以外のシステムでは、かなり手の込んだ作業が必要になります。TEI あるいは Stylesheet リポジトリに変更が加えられると、TEI Jenkins サーバでさまざまなビルドが行われますが、自分のマシンでテストを実行した方がよいかもしれません。というのも、おそらくその方が実行も速いでしょうし、問題が見つかったときに Jenkins からメールが届くのを待っている時間も節約してくれるからです。それだけでなく、作業用ブランチでの変更については Jenkins はまったく関知しませんし、かといって dev ブランチにマージした後で大量のバグを直すハメになるのは避けたいところです。ですから自分でまず作業結果をチェックするのはとても有益でしょう。</p>
        <p>自分用の開発・テスト環境を構築するための第一歩は、TEI および Stylesheet リポジトリのコピーを入手することです。これらは <ptr target="https://github.com/TEIC/TEI"/> と <ptr target="https://github.com/TEIC/Stylesheets"/> からそれぞれ入手することができます。ここから先の手順説明はすべて、少なくともある程度コマンドラインでの作業に慣れているものと仮定しています。そうでないならばこれが学ぶよい機会かもしれません。Mac に偏ったチュートリアルですが “<ref target="https://www.learnenough.com/command-line-tutorial">Learn Enough Command Line to Be Dangerous</ref>” があります。Windows 10 ユーザなら “<ref target="http://www.howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/">How to Install and Use the Linux Bash Shell on Windows 10</ref>” で Bash シェルのインストール方法とその使い方の基本を学ぶことができるでしょう。さてターミナルのウィンドウを開いたら、次のコマンドで TEI のリポジトリを複製することができます。<lb/><code>git clone git@github.com:TEIC/TEI.git</code>  <lb/><code>git clone git@github.com:TEIC/Stylesheets.git</code></p>
        <p>これらのリポジトリは同じディレクトリに保存するのがおそらくはよいでしょう。私は <code>/Users/hcayless/Development/TEIC</code> という名前のディレクトリに保存しています。この先わかるでしょうが、Mac か Windows ならユーザディレクトリのどこかがいいでしょう。Ubuntu かその他の Linux を使用しているなら、好きなところでいいです。すでに TEI および Stylesheets リポジトリの作業用コピーを用意していて、そこで行われた変更を GitHub リポジトリに送信して公開する前にテストしたいものと仮定しましょう。TEI では環境構築済みのテスト用 Docker を提供しています。まずは Docker の実行環境を入手してください。Mac なら <ptr target="https://www.docker.com/products/docker#/mac"/> で、Windowsなら <ptr target="https://www.docker.com/products/docker#/windows"/> で、Linuxなら <ptr target="https://www.docker.com/products/docker#/linux"/> で入手することができます。Docker をインストールしたら、次のコマンドを実行して、環境構築済みイメージファイルのコピーを入手してください。<lb/><code>docker pull teic/teidev-docker</code> <lb/></p>
        <p>これでテスト環境を実行する準備が整いました。Docker のための情報があと二、三必要です。リポジトリのある場所と、タイムゾーンです。タイムゾーンは <ref target="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">Wikipedia</ref> で調べることができます。これが必要になるのは、Docker コンテナのタイムゾーンの初期設定が UTC だからです。これはたまたま実際に UTC 時間を使用してた場合を除いて、ビルドの際に奇妙な警告を引き起こすことになります。というのも、コンピュータのローカル時刻と、コンテナの中の設定が一致しないからです。リポジトリを格納しているディレクトリは、コンテナの中のディレクトリに対応づけられます（これがリポジトリを1箇所にかためておく方がやりやすい理由です）。テストコンテナを実行するには次のようなコマンドを使用します。<lb/><code>docker run --name tei -v /Users/hcayless/Development/TEIC:/tei -it -e TZ=America/New_York
            teic/teidev-docker</code> <lb/> これにより、"tei" と名付けられたコンテナのルートディレクトリに、Bash シェルを使ってログインします。TEI と Stylesheets リポジトリを複製したローカルファイルシステム上のディレクトリは、コンテナの <code>/tei</code> ディレクトリに対応づけられます（これが上記のコマンドで <code>-v</code> の後に続く部分の意味です）。その後 <code>cd tei</code> を実行し、次に <code>ls</code> を行うと、上で複製したリポジトリが表示されます。もう一つすることがあります。それは、ガイドラインをビルドするプロセスに、Stylesheets リポジトリの複製がどこにあるかを教えることです。<code>TEI/P5</code> ディレクトリに <code>local.mk</code> ファイルを追加することによって、これを行います。そこで（ <code>/tei</code> ディレクトリから）<code>cd TEI/P5</code> を行ってから、<code>echo "XSL=/tei/Stylesheets" &gt; local.mk</code> を実行します。これでビルドをすることができるようになりました！それだけでなく、通常の環境で Guidelines と Stylesheets リポジトリの作業を行ってから、それを Docker でテストすることもできます。上記の Docker 作成コマンドで、コンテナに "tei" という名前をつけましたので、これを使って後から Docker 環境に戻ってくることができます。この環境は Bash 端末を実行しているので、コマンドプロンプトで <code>exit</code> を入力することにより、この環境から抜けることができ、これによりコンテナも停止します。再起動は <code>docker start -ai tei</code> というコマンドで可能です。これにより前回コンテナを停止した時の状態から再度コンテナが起動され、端末が接続されます。<code>docker start -ai tei</code> の代わりに、<code>teidocker</code> といった単純な別名のコマンドを作りたくなるかもしれませんね。</p>
        <p>たとえば、HTMLバージョンのガイドラインを作成するには、（<code>/tei/TEI/P5</code> で）<code>make html-web</code> を実行します。プロセスが終了すると、P5 ディレクトリに "Guidelines-web" という名前のディレクトリが作成されています。Docker シェルの外でこのフォルダを開き、index.html ファイルを見つけてブラウザで開くことができます。“Make” は一般的にはプログラムのコンパイルに使われるプログラムですが、ここで使われているように、一種のバッチスクリプト全般用ツールとしても役に立ちます。通常 Guidelines リポジトリでは、<code>P5/</code> ディレクトリで Make を実行します。Stylesheets リポジトリでは、リポジトリのトップディレクトリ（<code>Stylesheets/</code>）で実行します。また、<code>Makefile</code> を含むディレクトリであればどこでも Make を実行することが可能です。ターゲットは異なる場合があることに注意してください。<code>Stylesheets/Test</code> の中で <code>make</code> を実行することと、その一つ上の階層で <code>make test</code> を実行することは、ほとんど同一です。もしトラブルの解決のために特に行いたいテストセットがあれば、そのテストターゲットだけを独立に行うことも可能です（例えば ODD 変換メソッドをテストするには、<code>Stylesheets/Test</code> で <code>make test-oddity</code> を実行します）。すべてのターゲットは <code>Makefile</code> の中で定義されています。</p>
        <p>ドキュメント <ref target="http://www.tei-c.org/Guidelines/P5/get.xml">Using the TEI GitHub
          Repository</ref> には、実行可能なプロセスについてより詳細な説明が—そしてそれを実行するための環境構築についてはごく貧弱な情報が—あります。しかし単純にそれらは全部無視してください。そこで列挙されている <code>make</code> ターゲットの他に、TEI と Stylesheets の両方のリポジトリには、GitHub にプッシュした際に Jenkins で実行される <code>make test</code> ターゲットがあります。これらはいずれも、プッシュする前にコードを確認するための優れた方法です。これらのターゲットを実行すると、いずれの場合でも Make はたくさんのことを行いますが、それらすべてにおいて最後は “BUILD SUCCESSFUL” のメッセージで終わらなければなりません。何か問題がある場合は、うまくいけば何が悪いかの何らかの指摘とともに、失敗のメッセージが表示されます。一度ビルドターゲットを実行した後は、再度ビルドする前には <code>make clean</code> を実行して、前回のビルドで生成されたファイルが次の実行時に干渉しないよう、確実を期した方がおそらくはよいでしょう（Make は一度行われたことは繰り返さないようにするので、もしビルドの生成物が残されているのを見つけた時は、それを再度ビルドすることはしません）。ターゲットはひとまとめにすることができますので、<code>make clean test</code> と実行すれば、前回の残存物の除去を行ってから、テストターゲットを実行します。</p>
        <p>テストやその他ビルドなどターゲットを実行すると、大量のテキストが出力されるのを目にすることになりますが、それらのほとんどは無視してよいものです。もしいずれかのプロセスでエラーが発生したら、Make は実行を停止するはずですので、ターミナルの最後に出力されているテキストが、何が起こったかを語っているはずです。このメッセージがあまり役に立たないこともありえますが、その場合は Make が実行していたコマンドを特定し、このコマンドを自分で実行して、エラーメッセージを確認する必要があるでしょう。Stylesheets リポジトリでは、エラーはしばしば、あるテストの実際の出力が、期待する出力とは違う、という形をとります。この場合のテストの失敗は、必ずしもエラーであるとは限りません。もし ODD のコンパイルやスキーマの生成に何か変更を加えていた場合は、新しい出力が正しいかもしれませんが、古いものとは一致しないでしょう。この問題が発生した場合は、<code>Test/</code> ディレクトリの新しい出力を、<code>Test/expected-results</code> にコピーすることができます。もちろん、新しい出力が本当に正しいのかについては、いささか慎重になる必要があります。というのも、もし本当にはそれが機能していなくても、今度はテストにパスしてしまうからです。なぜならテストで確認されているのは、テストでの出力が、事前に想定された出力と同じかどうかだけだからです。</p>
        <p>ではテストを楽しんでください。幸運を祈ります！</p>
      </div>
    </body>
  </text>
</TEI>
