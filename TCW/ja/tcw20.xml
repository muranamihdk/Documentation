<?xml version="1.0" encoding="utf-8"?>
<!--
$LastChangedDate: 2011-12-06$.
$LastChangedBy: martindholmes$
$LastChangedRevision: 8769 $
-->
<?xml-model href="https://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_all.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="https://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_all.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:sch="http://purl.oclc.org/dsdl/schematron">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>TEI ガイドラインの編集の方法</title>
        <author>Lou Burnard</author>
      </titleStmt>
      <publicationStmt>
        <publisher>Text Encoding Initiative</publisher>
        <date>2011</date>
      </publicationStmt>
      <sourceDesc>
        <p>All my own work</p>
      </sourceDesc>
    </fileDesc>
    <revisionDesc>
      <change when="2018-09-16" who="MDH">Linked to schema that actually exists, and tweaked to handle the fallout.</change>
      <change when="2018-09-16" who="MDH">Adding documentation on how to create or edit an Appendix to the Guidelines.</change>
      <change when="2016-07-08" who="MDH">Adding more documentation to clarify where some processing instructions in the Guidelines are actually processed.</change>
      <change when="2015-12-14" who="MDH">Updates to account for new Jenkins server subdomains.</change>
      <change when="2015-11-10" who="MDH">Updates to account for the change from master to dev branch on GitHub.</change>
      <change when="2015-10-03" who="MDH">Updates to account for the shift from SF SVN to GitHub.</change>
      <change when="2015-04-06" who="MDH">Added exhortation to include sufficient linebreaks in examples,
        to avoid distorted page rendering in the Guidelines HTML output.</change>
      <change when="2015-02-11" who="MDH">Added clarification about how to XInclude a new spec file.</change>
      <change when="2013-12-22" who="KSH">Some clarifications, including not to use valDesc.</change>
      <change when="2013-11-17" who="KSH">Made more explicit that you have to update @versionDate when editing the content of an element that it's located on.</change>
      <change when="2013-06-24" who="KSH">When closing a ticket, add the URL of the revision number. Also replaced all "SVN" with "Subversion" when referring to the software.</change>
      <change when="2013-06-20" who="KSH">Copyediting and clarified how to do citations per https://sourceforge.net/p/tei/bugs/527/ .</change>
      <change when="2013-04-08" who="KSH">Full path to schema for validation</change>
      <change when="2013-02-01" who="KSH">We should use egXML@source instead of egXML@corresp per Sebastian.</change>
      <change when="2012-12-30" who="KSH">Clarified svn commit instructions.</change>
      <change when="2012-12-28" who="KSH">Clarified what to include in a specList. Removed info that duplicates tcw24. Some light copyediting.</change>
      <change when="2012-12-17" who="MDH">Revised instructions for creating a new element to take account of the switch to XInclude from entities.</change>
      <change when="2012-09-13" who="MDH">Revised Schematron section based on feedback from KH.</change>
      <change when="2012-09-06" who="MDH">Added a section on adding Schematron constraints.</change>
      <change when="2012-08-09" who="DRS">Removed sections redundant with new TCW24 and redirected a link there.</change>
      <change when="2012-05-15" who="KSH">Added instructions on when you can edit translations of specs.</change>
      <change when="2012-05-14" who="KSH">Removed mention of P5/Source/Guidelines/en/style-guide.txt since this has been removed from SourceForge.  Corrected @target to local copy of this document.</change>
      <change when="2012-02-18" who="KSH">Created new section on good encoding practice, which includes info on @xml:id and @target and new note about using ptr instead of ref.</change>
      <change when="2012-02-13" who="MDH">Removed "building a release" section and replaced with link to tcw22.</change>
      <change when="2011-12-16" who="KSH">updated publicationStmt; added steps on updating latest download and creating news item in SourceForge</change>
      <change when="2011-12-16">correction by <name>David Sewell</name> per SR request</change>
      <change when="2011-02-19">started first draft</change>
    </revisionDesc>
  </teiHeader>
  <text>
    <body>
      <p>この文書は、現在 TEI ガイドラインの編集において適用されている管理された方法を、厳密に説明することを目的としています。この状態の根拠 -- <emph>なぜ</emph>それはそのようであるのか -- について、全般的な解説が後でここに追加されるかもしれません。この文書が意図するのは、ガイドラインの文章の継続的な開発と保守に積極的に寄与することを希望する理事会のメンバーに向けて、情報を提供することです。</p>
      <div>
        <head>ガイドライン各章の構成</head>
        <p>ガイドラインのほとんどの章が、それぞれ別のモジュールを定義していることにはお気づきのことと思います。少なくとも理屈の上では、それぞれの章は次のようなほぼ同じ構成で組織されます。<list>
            <item>最初の段落は、その章で扱うモジュールの目的の説明と、章内の個々の節へのリンクを含みます。</item>
            <item>それぞれの節では、要素の（小）グループの説明が行われます。これらのグループは通常、<gi>specList</gi> で始まります。これは一般的に、その節で論じられるすべての要素の一覧です。一覧内の並び順は、それぞれの文脈に応じ何らかの有意味な順番によりますが、可能な子要素を全て列挙する必要はありません。</item>
            <item>そのあと、個々の要素が順番に説明されます。通常は適当な使用例を含みます（例については <ptr target="#examples"/> も参照のこと）。</item>
            <item><gi>specGrp</gi> によるそれぞれの要素グループの定義を、その節の末尾に置くことができます。</item>
            <item>そのモジュール全体の <gi>specGrp</gi> は、その章の末尾に置かれます。ここには直接的にまた間接的に他の場所からの仕様定義が含まれます。直接的には XIncludes を使うことによって含まれ、間接的には <gi>specGrpRef</gi> を使って既述の <gi>specGrp</gi> を参照することで含まれます。</item>
          </list></p>
<p>特定のモジュールの説明や定義を行っていない章は、上記の限りではありません。</p>
      </div>
      <div>
        <head>仕様定義の構成</head>
        <p>ガイドラインで定義されている要素、クラス、およびマクロは、それぞれが独自の XML ファイルの中で定義されています。ファイルには、しかるべき <gi>elementSpec</gi>、<gi>classSpec</gi>、もしくは <gi>macroSpec</gi> が含まれます。これらのファイルは <ident>Source/Specs</ident> ディレクトリに置かれます。例えば <ident>Source/Specs/abbr.xml</ident> ファイルは、<gi>abbr</gi> 要素のための仕様定義を含みます。仕様定義の主要部分を構成する要素には、それぞれに <att>versionDate</att> 属性があることに注意してください。<emph rend="bold">もしその要素の内容が編集されたら、忘れずこの属性の値を変更せねばなりません。</emph>これにより、同じファイルに含まれている翻訳に更新が必要かどうか、わかるようにするためです。一般的な規則として、その言語を母語としない限りは、その言語の翻訳を更新してはなりません。もし翻訳の修正に自信がある場合でも、翻訳の <att>versionDate</att> 属性は変更せずにそのまま残しておくべきです。これにより最終的にはレビューが行われることを確実にするためです。</p>
        <p>ガイドラインの各章は、<ident>Source/Guidelines/xx/YY-name.xml</ident> という名前のファイルに収められています。xx は言語を示します（現在は en と fr のみです）。YY は各章を示す識別子であり、2文字で構成されます（<ptr target="#chaptercodes"/> を参照のこと）。name はその章で定義されているモジュールの名称です。</p>
        <p><ident>Source/guidelines-xx.xml</ident> ファイル（xx は en か fr かのいずれかです）は、ガイドライン全体に対する <soCalled>「ドライバファイル」</soCalled> です。このファイルに、ガイドラインを構成する各章が、XInclude 要素を使ってまとめられています。</p>
        <p>したがって、新たに要素（ここでは仮に <gi>saintName</gi> とします）を追加する場合は、以下の手順に従って進めねばなりません。<list type="ordered">
            <item>新しい要素のための <gi>elementSpec</gi> を含む新しいファイル <ident>saintName.xml</ident> を書き、これを <ident>Specs</ident> フォルダに追加します。どの <ref target="http://www.tei-c.org/release/doc/tei-p5-doc/en/html/TD.html#TDcrystals">ODD 要素</ref> を使うべきかは他の仕様定義を見てください。この時点では <gi>valDesc</gi> を使わないことに注意してください。代わりに <gi>datatype</gi> のみを使用します。</item>
            <item>関連する章のソース（この例ではおそらく <ident>ND-namesdates.xml</ident>）を編集して、その要素に関連するドキュメントを追加します。本文内から新しい仕様定義の記述を参照するには、<gi>specList</gi> を使い次のようにします。<egXML xmlns="http://www.tei-c.org/ns/Examples"> 
  <p>This module also defines the following canonical element: <specList>
    <specDesc key="saintName"/>
  </specList></p>
</egXML>そしてその要素の使用方法について何らかの説明を加えます。</item>
<!--	   This item added by MDH 2015-02-11. -->
	  <item>同時に、関連する章においては、その要素の仕様定義ファイルをガイドラインのソースに読み込むための、XInclude 命令が含まれていることを確認します。通常はその章のソースのどこかに、すでに同様のリンクを含む既存の <gi>specGrp</gi> 要素があるので、そこに以下のように追加することになるでしょう。<eg>
  &lt;specGrp xml:id="DNDPER" n="Personal and organizational names"&gt;
  &lt;include xmlns="http://www.w3.org/2001/XInclude" href="../../Specs/orgName.xml"/&gt;
  &lt;include xmlns="http://www.w3.org/2001/XInclude" href="../../Specs/saintName.xml"/&gt;
  [...]
  &lt;/specGrp&gt;
</eg></item>
          </list></p>
      </div>
      
      <!-- This section added by MDH 2013-04-26 as part of work on https://sourceforge.net/p/tei/bugs/512/. 
          Extra clarification added by MDH 2016-07-08.   -->
      <div>
<head>処理命令</head>
 <p>ガイドラインのソースコードの幾つかの場所に、次のような見た目の処理命令があることに気づかれていることと思います。<egXML xmlns="http://www.tei-c.org/ns/Examples">
          &lt;?insert totalElements?&gt;
        </egXML>これらの処理命令は、ガイドラインのビルドの過程で、そこで生成された内容に置き換えられます（この処理は P5/Utilities/expand.xsl の XSL モジュールで行われます）。上の例の場合、現在のバージョンのガイドラインで定義されている要素の総数が計算され、挿入されます。以下のリストは、現在使われている処理命令の一覧と、それが何に置き換えられるかを示したものです。<list type="gloss">
  <label>&lt;?insert tab-content-models?&gt;</label>
  <item>生成された内容モデルの表を ST (The TEI Infrastructure) 章に挿入する（他の章では使用できない可能性がある）</item>
  <label>&lt;?insert totalElements?&gt;</label>
  <item>現バージョンで定義されている要素の総数を挿入する</item>
  <label>&lt;?insert version?&gt;</label>
  <item>現在のリリースの TEI のバージョン番号を挿入する</item>
</list>ガイドラインのセクションの執筆中に、これらの変数で置き換えが可能な個所があれば、適切な処理命令をそこに挿入することは自由に行ってください。何か他にもこの方法で生成可能な内容を思いついたときは、GitHub で issue を発行し、実装のための提起をしてください。</p>
     </div>

      <div>
        <head>スタイルについての注意事項</head>
        <div>
          <head>一般</head>
          <p><ref target="http://www.tei-c.org/Activities/Council/Working/tcw24.xml">TEI ガイドラインの編集のためのスタイルガイド</ref> を参照してください。これは綴りや句読点などに関して、厄介な悩みの種になりがちな問題に、実践上の指針を示そうとしたものです。これらの規則の目的は、非一貫性を避けることと、そして可能なかぎり、イギリス英語かアメリカ英語かのいずれかに明らかに偏った文章を避けることです。</p>
          <p/>
        </div>
        <div xml:id="examples">
          <head>例示</head>
          <p>例示の目的は、特定の要素や機能の説明をすることです。この主要な目的に寄与しない無関係なエンコーディングは、含めてはなりません。そのようなエンコーディングを含めることが避けられないのであれば（例えば例を妥当なXMLとするために必要な場合など）、本文の中でそのことについて説明すべきです。</p>
          <p>例示は可能なかぎり実際の文書から選択し、次のいずれかの方法でその書誌情報を示すべきです。<list>
              <item><gi>note</gi> 要素において、<att>place</att> 属性 の値を <val>bottom</val> か foot<val>foot</val> にし、<gi>egXML</gi> 要素を続ける（典拠が <gi>ptr</gi> 要素 の URL だけである場合）</item>
              <item><ident>BIB-Bibliography.xml</ident> ファイル中で完全な書誌情報の形で示す（可能であれば <gi>ptr</gi> 要素の URL とともに）</item>
            </list><gi>egXML</gi> 要素では <att>source</att> 属性を使い、例をそのソースにリンクします。<gi>exemplum</gi> 要素では <att>xml:lang</att> 属性が必須であることに注意してください。これは所与の文脈においてどの例を選ぶべきか、ODD プロセッサに確実に認識させるためです。</p>
          <p>すべての例示は、いずれの要素も root 要素となれるように修正された TEI スキーマに対して妥当でなければなりません。この妥当性はビルドの過程でチェックされます。</p>
          <p>例示を追加したとき、あるいは編集したときは、それが正常に表示されるかどうか、続く Jenkins のビルドで常に確認しなけれななりません。特に例の中に、改行なしの長い文章が含まれるときは注意してください。というのも、これが表示されたときに水平スクロールを伴うものとなった場合、リファレンスページのレイアウトが崩れる可能性があるからです。このような出力に気がついた場合は、サンプルコードの適当な箇所に改行を挟み込むことにより、これを直すことができます。</p>
        </div>
        <div xml:id="encoding">
          <head>優れたエンコード方法</head>
          <p>優れた方法によるエンコードは、妥当性だけでなく、高い機能性を持つガイドラインも保証します。</p>
          <p>図およびガイドラインの他のセクションを参照する場合は、<gi>ref</gi> ではなく、<gi>ptr</gi> を使用して、参照した項目のタイトルと番号が、ガイドラインのコンパイル時に自動的に挿入されるようにします。</p>
          <p>ビルドプロセスは相互参照を検証します。ガイドラインはビルド時に単一の XML 文書にコンパイルされるため、ID はテキストと例示のすべてにわたって一意である必要があります。したがって、例示中に現れるすべての <att>xml:id</att> 属性値は、ガイドライン全体の文章の中で一意である必要があります。加えて、<att>target</att> 等の値が指し示すものがソースの中にない時は、ビルド処理中にそれらすべてに警告フラグが立てられます。</p>
        </div>
      </div>
      <div>
        <head>ガイドラインに変更を加える</head>
<!--    Substantially edited by MDH 2015-10-03 for shift to GitHub.   -->
        <p>ガイドラインのほとんどの変更は、GitHub におけるバグや、機能要求チケットの結果として行われます。チケットが割り当てられ、変更を進める合意があることを確認したら、以下の手順に従ってください。</p>
        
        <list>
          <item>git リポジトリのローカルコピーをまだ作成していない場合は、<ref target="https://github.com/TEIC/TEI">GitHub site</ref> へ行き、そこにある指示に従ってリポジトリをクローンしてください。通常は次のようなコマンドを実行することになります。 <code>git clone https://github.com/TEIC/TEI.git TEI</code></item>
          <item>コピーをすでに作成している場合は、必ず変更を加える<emph>前に</emph>、最新の状態になっていることを確認してください（<code>git pull</code> を実行します）。</item>
          <item><code>dev</code> ブランチにいることを確認してください（<code>git checkout dev</code> を実行します）。ブランチに直接変更を加えることはしません。</item>
          <item>適切なファイルを編集して変更を行ってください。必要なら新しいファイルを作成してください。変更後もソースファイルが妥当であることを確認してください。TEI のすべてのソースファイルには、P5 ソースの検証に使用される NVDL ファイルの最新版にリンクする、xml モデル処理命令が含まれている必要があります。</item>
          <item>ローカル環境に P5 のビルド環境をインストールしている場合は、変更後もビルドが通ることと、ビルド後も例示が妥当であることを確認してください。<ptr target="http://teic.github.io/TCW/testing_and_building.html"/> にある指示に従えば、Docker ベースのビルド環境を用意することができます。いずれのビルド環境も用意できない場合は、単に git を使って更新バージョンを GitHub にプッシュし、<ident>Jenkins</ident> のふたつの継続的インテグレーションサーバ（<ptr target="http://jenkins.tei-c.org/"/> と <ptr target="http://jenkins2.tei-c.org/"/>）が変更を評価するのを待ってください。</item>
          <item>変更をチェックインします。<list>
              <item>ファイルが新しい場合は git リポジトリに追加します。<code>git add filename.xml</code></item>
                </list></item>
              <item>変更をコミットします。<code>git commit -m "Your commit message" filename.xml</code> <emph>変更の元となった GitHub のイシューチケットへのリンクを含む、詳細なコミットメッセージを追加することを忘れないでください。</emph>.</item>
          <item>変更を git リポジトリにプッシュします。<code>git push origin dev</code></item>
          <item>git が変更を受け付けた時に、このリビジョンのハッシュを書き留めておきます。</item>
          <item>変更が成功したら、GitHub のイシューチケットに、リビジョンのハッシュを含むコメントを追加します。すべての変更が終わっていればチケットを閉じてもいいです。変更が成功しなかった場合は以下を参考にしてください。</item>
        </list>
        <p>いずれかの段階でエラーメッセージが表示されるかもしれません。ソースを不正な状態で放置しないでください（それは他の人の人生を不必要に難しくします）。妥当性エラーをすぐに直せない場合は、それについて考えている間、変更は元に戻しておいてください。複数のファイルが関係するとりわけ複雑な変更に取り組んでいるときは、変更の作業をするブランチを作った方がいいかもしれません。そして成功のうちに作業が完成したと確信が持ててから、ブランチをマージするのです。どう着手したらいいかの指示は、なんでもいいので Git のガイドブックをみてください。我々の Jenkins サーバは dev ブランチだけをビルドするということを、心に置いておいてください。このため、作業ブランチのテストビルドのためには、 Jenkins サーバには頼れません。</p>
        
        <p>JenkinsサーバはGitリポジトリをモニタし、変更を検知すると、ちょうどローカルのマシンでビルドをするのと同じように、チェックアウトし、いくつかのターゲットをビルドし始めます。Jenkinsサーバにビルドをチェックさせることには、いくつかの利点があります。</p>
        
        <list>
          <item>ビルドに必要な種々のパッケージやその他ソフトウェアなどすべてを、あなたのシステムにインストールしておく必要がありません。これが意味するのは、たまたま使っているどのコンピュータであっても、大量の特別なソフトウェアをインストールすることなしに、ガイドラインを素早く修正できるということです。</item>
          <item>Jenkinsサーバの必要なパッケージは定期的にアップデートされがちなので、それらが適切に作動していることを確かめるために私たちは常に監視しています。</item>
          <item>Jenkinsはもし何か問題があればメールであなたに知らせようとするとともに、便利なデバッグツールを提供しています。</item>
        </list>
        
        <p>変更を送信した後に、ビルドが失敗したというメールがJenkinsサーバのひとつから届くと、そこにはサーバのビルド情報へのリンクが掲載されています。この場合すべきことは以下のようになります。</p>
        
        <list>
          <item>First, check that the build is broken on both Jenkins servers. If it's only broken on one of them, it may have been caused by a lag in updates to packages on that server. </item>
          <item>If both servers have completed a build since your commit, and both are showing an error, then you need to check where the error is occurring. On the page for that build on the Jenkins server site, click on <q>Parsed Console Output</q> on the left menu. You'll see links to <q>Errors</q> and <q>Warnings</q>; these will show you the exact point in the build script where the errors or warnings occurred. This may give you a useful clue to the cause of the failure.</item>
          <item>If you still can't figure out the problem, email the Council list with a link to the build information, and someone will be able to help.</item>
          <item>Once you know what the problem is, fix it by editing the source again and committing the change to the git repository. Jenkins will then do its stuff, and you'll know whether your fix worked as expected.</item>
        </list>
        
        <p>Error messages appearing during the <ident>make test</ident> phase (the <q>TEIP5-Test</q> job on Jenkins) usually indicate that
          your changes are in conflict with the Birnbaum Doctrine, which decrees that changes in the
          Guideline schemas should not invalidate existing documents. You may wish to discuss the
          specific issue with other Council members.</p>

	
<!-- The following div added by MDH 2013-11-10 per https://sourceforge.net/p/tei/bugs/612/. -->
        <div>
            <head>Images</head>
            
            <p>If you use an image in your  Guidelines change, you will need to add it to the git repository
                    in the <ident>P5/Images</ident> directory. If you have asked for and received permission 
                    from a rights-holder to use the image, include all of the relevant correspondence in a zip 
                    file named the same as the image file (so for an image <ident>fred.png</ident>, include
                    permission documents in a file called <ident>fred.zip</ident>).</p>
        </div>
        
<!--      This div added by MDH 2018-09-16 following work
          on ticket #1657. 
        -->
        <div xml:id="appendices">
          <head>付録を追加する、あるいは編集する</head>
          
          <p><title level="m">TEI Guidelines</title> の付録の大部分は、ビルドの過程でコンパイルされたガイドラインのソース（<ident>p5.xml</ident> もしくは <ident>p5subset.xml</ident>）から自動的に抽出された、（要素、属性、クラスなどの）機能リストから成ります。このタイプの新しい付録を追加するには、以下の作業が必要です。<list rend="numbered">
          <item><ident>TEI/P5/Source/Guidelines/en/</ident> フォルダに新しく <ident>APPENDIXTHING.xml</ident> ファイルを作ります。既存の他の付録のファイルに倣ってください。基本パターンとしては、あなたが作成したリストへの、ごく短い導入を提供します（以下を参照してください）。規約ではこのファイルにはすべて大文字で名前をつけ、小文字の <ident>.xml</ident> を後につけます。</item>
          
          <item><ident>TEI/P5/Source/guidelines-en.xml</ident> のファイルのちょうど最後近くに、新しいファイルを <title level="m">Guidelines</title> に読み込むための XInclude の行を追加してください。ここでも、すでにそこにある例に倣ってください。新しい付録は、他の付録との並びの中で、意味のある位置になるよう置いてください。</item>
          
          <item>その付録のためのリストが自動で作られるものであるなら、リストや表が生成されるよう、Stylesheets リポジトリ中の適切なファイル（ほとんどの場合は <ident>Stylesheets/common/common_tagdocs.xsl</ident>）を編集してください（以下を参照してください）。</item>
          
          <item>自動で生成された付録の中で、他言語のガイドラインでは翻訳されるべき見出しを使用している場合は、適切な言語エントリを <ident>Stylesheets/i18n.xml</ident> に（まだそれがなければ）追加してください。</item>
          </list></p>
          
          <p>Auto-generated appendix listings will require two things: a TEI <gi>divGen</gi> element which acts as a trigger to cause the list to be generated, and a Stylesheets template which processes the <gi>divGen</gi> to create the output. For example, the list of deprecations consists of this <ident>DEPRECATIONS.xml</ident> file:
            
            
    <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <div type="div1" xml:id="DEPRECATIONS">
      <head>Deprecations</head>
      <div>
        <head>About the Deprecation Appendix</head>
        <p>This appendix gives you a list of all items (elements,
          attributes, attribute values, datatypes etc.) which are deprecated
          in this revision of the TEI Guidelines (revision &lt;?insert
revision?&gt; of TEI P5 &lt;?insert version?&gt;).</p>
      </div>
      <divGen type="deprecationcat"/>
    </div>
    </egXML>
            
            Note that there are two kinds of auto-generated content here: first, the two processing instructions 
            <code>&lt;?insert revision?&gt;</code> and 
            <code>&lt;?insert version?&gt;</code>, which are self-explanatory and can simply be used, and 
            <code>&lt;divGen type="deprecationcat"/&gt;</code>, which was created specifically for this appendix file, and for which processing had to be explicitly written.
            
            If you now look at <ident>Stylesheets/common/common_tagdocs.xsl</ident>, you'll find this template:
            
            
<eg>
  &lt;xsl:template match="tei:divGen[@type = 'deprecationcat']"&gt;
    &lt;xsl:element namespace="{$outputNS}" name="{$tableName}"&gt;
      &lt;xsl:attribute name="{$rendName}"&gt;
        &lt;xsl:text&gt;deprecationcat&lt;/xsl:text&gt;
      &lt;/xsl:attribute&gt;
      &lt;!-- .. --&gt;
    &lt;/xsl:element&gt;
  &lt;/xsl:template&gt;
</eg>
            
            This template creates a table in whatever the target output format is, listing the deprecations. Note that the table headings are created like this:
            
            
<eg>
  &lt;xsl:element namespace="{$outputNS}" name="{$cellName}"&gt;
    &lt;xsl:element namespace="{$outputNS}" name="{$hiName}"&gt;
      &lt;xsl:attribute name="{$rendName}"&gt;
        &lt;xsl:text&gt;label&lt;/xsl:text&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="{$langAttributeName}"&gt;
        &lt;xsl:value-of select="$documentationLanguage"/&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:sequence select="tei:i18n('Identifier')"/&gt;
    &lt;/xsl:element&gt;
  &lt;/xsl:element&gt;
</eg>
            
            
            where the keyword <val>Identifier</val> is used to look up the appropriate language translation in the <ident>Stylesheets/i18n.xml</ident> file. If those items already exist in the file, you can simply use them, but if you are creating headings which do not yet have entries, you will need to add them to <ident>Stylesheets/i18n.xml</ident> like this:
            
            
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
  <entry>
    <key>Identifier</key>
    <text xml:lang="en" lang3="eng">Identifier</text>
  </entry>
  </egXML>
            
            and if you are competent to add the equivalent translations in any of the <title level="m">Guidelines</title> languages, you can add them alongside the English version:
            
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
  <entry>
    <key>Description</key>
    <text xml:lang="en" lang3="eng">Description</text>
    <text xml:lang="de" lang3="deu">Beschreibung</text>
    <text xml:lang="fr" lang3="fra">Description</text>
    <text xml:lang="it" lang3="ita">Descrizione</text>
  </entry>
  </egXML>
            Only when all these pieces are in place can the new appendix function correctly. It would normally be appropriate to do work on this scale in a branch of the repo, but this is a little complicated by the fact that you need to edit two repositories separately. It is fine to make the changes in the TEI repository first, resulting in an appendix page that simply lacks its listing, then do the Stylesheets changes to make the listing.</p>
            
            <p>Of course, a simple <soCalled>manual</soCalled> appendix consisting of some explanatory prose can be created simply by adding the <ident>APPENDIXTHING.xml</ident> file and XIncluding it in <ident>guidelines-en.xml</ident>, with no Stylesheets changes required.</p>
            
        </div>

      </div>
      

      <div xml:id="schematron">
        
        <head>Adding Schematron constraints to specifications</head>
        
        <p>The TEI ODD system is primarily concerned with generating schemas in the form of RelaxNG or XML Schema.
        However, there are often circumstances in which you want to apply constraints to elements and attributes which cannot easily be captured by
        normal XML schemas. For instance, you might want to apply a co-occurrence constraint on some attributes. The <att>targetLang</att> attribute
        is a good example. <att>targetLang</att> is an optional attribute which “specifies the language of the content to be found
        at the destination referenced by <att>target</att>, using a <soCalled>language tag</soCalled> generated according to
       <ref target="http://www.rfc-editor.org/rfc/bcp/bcp47.txt">BCP 47</ref>.” Obviously, there is no point in using <att>targetLang</att>
       if you're not also using <att>target</att>. However, many such co-occurrence constraints are difficult to express
        in RelaxNG schemas, and may not survive conversion to other schema formats such as XML Schema or DTD.</p>
        
        <p>For this reason, we often use ISO Schematron to express constraints like this. If you look in att.pointing.xml, where the <att>targetLang</att> 
attribute is defined, you'll find this constraint, inside the <gi>attDef</gi> for <att>targetLang</att>:</p>
        
          <egXML xmlns="http://www.tei-c.org/ns/Examples">
            <constraintSpec ident="targetLang" scheme="isoschematron">
              <constraint>
                <sch:rule context="tei:*[not(self::tei:schemaSpec)][@targetLang]">
                  <sch:assert test="count(@target)">@targetLang can only be used if 
                    @target is specified.</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
          </egXML>
        
        
        <p>This Schematron rule is an assertion that if <att>targetLang</att> is used, <att>target</att> should also be present. <gi>constraintSpec</gi> 
has an attribute <att>scheme</att> (normally set to <val>isoschematron</val>). Inside <gi>constraintSpec</gi>, <gi>constraints</gi>s have <gi>assert</gi> elements, 
which have <att>test</att> attributes. The <att>test</att> attribute value is always an XPath expression; if the XPath tests false, the assertion will be triggered, and its 
contents will appear on the console when you build or validate. There is also a <gi>report</gi> element which is similar, but which triggers when true rather than when false,
so you can check both positive and negative conditions. In Roma, you can also generate a Schematron schema which you can also use to test your document against. 
This document is essentially a compilation in Schematron of all the TEI constraints. The operation of checking a document with Schematron is independent of any other validation 
processes that take place using other schemas. For a full introduction to Schematron, see the <ref target="http://www.schematron.com">Schematron website</ref>.</p>
        
        <p><gi>constraintSpec</gi> can appear as a child of <gi>attDef</gi>, <gi>classSpec</gi>, <gi>elementSpec</gi>, <gi>macroSpec</gi>, and <gi>schemaSpec</gi>. 
We'll go through the process of adding a constraint like the one above. The constraint we're going to add relates to dating elements (<gi>date</gi>, <gi>birth</gi> etc.) and 
the <att>calendar</att> attribute. <att>calendar</att> <q>indicates the system or calendar to which the date represented by the content of this element belongs.</q> In other 
words, <att>calendar</att> should only be used if the dating element has textual content. This makes sense (assuming that <att>calendar</att> points at a valid <gi>calendar</gi> element):
        
            <egXML xmlns="http://www.tei-c.org/ns/Examples" valid="true">
              <date calendar="#julian">January, 1622</date>
            </egXML>
          
        
   whereas this is not:
        
            <egXML xmlns="http://www.tei-c.org/ns/Examples" valid="false">
              <date when="1622" calendar="#julian"/>
            </egXML>
          
        
        because the <gi>date</gi> element has no textual content to which the <att>calendar</att> attribute could apply. We're going to express this in the form of a Schematron 
constraint, along the lines of the one we've examined above. First, we open the att.datable.xml file, and find the <gi>attDef</gi> element which defines <att>calendar</att>. 
We can add the <gi>constraintSpec</gi> element immediately after the <gi>datatype</gi> element, like this:
        
        
  <egXML xmlns="http://www.tei-c.org/ns/Examples" valid="true">
    <constraintSpec ident="calendar" scheme="isoschematron">
      <constraint>
        <sch:rule context="tei:*[@calendar]">
          <sch:assert test="string-length(.) gt 0">
            @calendar indicates the system or calendar 
            to which the date represented by the content 
            of this element belongs, but this element 
            has no textual content.
          </sch:assert>
        </sch:rule>
      </constraint>
    </constraintSpec>
  </egXML>
        
        (Obviously, by the time you're reading this, the <gi>constraintSpec</gi> is already in the TEI source, so you'll see it there.) If the Schematron namespace is not 
already defined somewhere in the file, we'll also have to make sure we add it; in this case, I defined the prefix in the <gi>classSpec</gi> root element: 
<code>xmlns:sch="http://purl.oclc.org/dsdl/schematron"</code>. Then we commit our changes, and let the TEI build process build all the products, and make sure that 
we didn't get anything wrong.</p>
          
          <p>When writing Schematron constraints for the Guidelines, bear these points in mind:
          <list>
              <item>Ensure that the context item for the rule is an element, not an attribute, as in the example above. For technical reasons, the Schematron processing in the build process will generate error messages if the context item is an attribute.</item>
              <item>Break up the message up into fairly short lines, so that it's easy to read when it appears in the build log.</item>
              <item>Use the <gi>name</gi> element in place of the name of the context element. This will be helpful for future processing needs. </item>
              <item>Refer to attributes using the "@" prefix, rather than quotation marks or plain names (as above).</item>
          </list>
          
          </p>
        
        <p>The Schematron constraint above should cover what we're trying to accomplish. However, it's quite difficult for us to test whether it is in fact doing exactly what it should be, unless we build a new copy of Roma 
and use it to generate a Schematron schema, then validate a test document against it. This is probably not practical for most of us. Fortunately, the TEI build system provides a 
way for us to do this; in fact, we can put in place a couple of tests that will always be run whenever P5 is built, checking that our Schematron constraint is intact and functioning 
as we expect. </p>
        
        <p>The first thing we're going to do is add a couple of tests that should pass. We'll add a dating element which has both <att>calendar</att> and some textual content, as well as an 
empty dating element with no textual content. If these tests pass, then we know that our constraint is not doing anything wrong. (We don't yet know whether it's doing anything at 
all, of course; that comes later.) </p>
        
        <p>If you look at <ident>trunk/P5/Test</ident>, you'll see there is a whole folder full of files whose purpose is to test various aspects of the TEI build process and products. We want to add 
our tests to one of these files. The question is which one? We'll add it to the basic test file, which is <ident>testbasic.xml</ident>; this is tested against schemas generated from <ident>testbasic.odd</ident>, 
which should contain all the dating features we're interested in testing. If we look at that file, we find there are already several date elements in there, so we can try adding our 
<att>calendar</att> attribute to one of those. Let's choose the date of 1685 on a dictionary entry sense:
        
        
            <egXML xmlns="http://www.tei-c.org/ns/Examples" valid="true">
              <sense>
                <date calendar="http://en.wikipedia.org/wiki/Julian_calendar">1685</date>
                <form>
                  <orth>pamplemousse </orth>
                </form>
              </sense>
            </egXML>
        
        We could go to the trouble of adding <gi>calendarDesc</gi> and <gi>calendar</gi> to the header of the file so we can point to a calendar element in the same document, 
but since <att>calendar</att> is a <ident>data.pointer</ident>, we can point to an external source of calendar information.</p>
        
        <p>We also want to add, somewhere, a date element which has no textual content and no <att>calendar</att> attribute. We might as well do this in the header, 
by adding a simple <gi>revisionDesc</gi> element, which gives us the added bonus of being able to describe our change:
        
            <egXML xmlns="http://www.tei-c.org/ns/Examples" valid="true">
              <revisionDesc>
                <change>&lt;date when="2012-09-06"/&gt;MDH: Added @calendar to one date, and the date 
                  element in here, for testing a new Schematron constraint.</change>
              </revisionDesc>
            </egXML>
          
        
        Now we can commit our change, and see if the build of TEIP5-Test completes successfully on our Jenkins servers.</p>
        
        <p>If that build successfully completes, we haven't broken anything. But we still don't know whether our constraint will actually fire when something is wrong. 
In order to do that, we have to use the "detest" system. In <ident>trunk/P5/Test</ident>, you'll find the following files:
        
        <list>
          <item><ident>expected-results/detest.log</ident></item>
          <item><ident>detest.odd</ident></item>
          <item><ident>detest.xml</ident></item>
        </list>
        
        detest.odd and detest.xml are test files like the ones we've seen above, but the purpose of the <soCalled>detest</soCalled> files is to introduce deliberate errors and make sure that the testing process throws up the expected error results. What happens is basically this:
        
        <list>
          <item>Schemas are built from detest.odd (including a Schematron schema).</item>
          <item>The file <ident>detest.xml</ident> is validated against those schemas.</item>
          <item>Resulting error messages are collected in a file called <ident>detest.log</ident> (in the Test directory).</item>
          <item>That file is compared with the <ident>detest.log</ident> file in the <ident>expected-results</ident> subdirectory.</item>
          <item>If they are not identical, the test build fails.</item>
        </list>
        
        So what we need to do is to add some new markup to <ident>detest.xml</ident> which is designed to fail our Schematron test. The problem is that we cannot reliably predict how it will fail—in other words, we can't know in advance what the resulting <ident>detest.log</ident> file should look like, because we can't know in what order the tests will run, and what the precise error messages might be. We could find this out if we had a working local build environment of our own, but it's far simpler to let Jenkins do the job for us. So this is what we'll do:
        
        <list>
          <item>Add our new test to <ident>detest.xml</ident>.</item>
          <item>Commit the change to the git repository.</item>
          <item>Let Jenkins run the build (which should fail).</item>
          <item>Examine the resulting <ident>detest.log</ident> on Jenkins, and copy it to our local <ident>expected-results/detest.log</ident>.</item>
          <item>Commit that change to the repository.</item>
          <item>Let Jenkins build again, and make sure that the build completes successfully.</item>
        </list>
        
        We'll add this div to the <ident>detest.xml</ident> file:
        
        
<egXML xmlns="http://www.tei-c.org/ns/Examples" valid="false">
  <div>
    <p>Added by MDH. This tests the Schematron constraint that any element with 
          @calendar must have some textual content.</p>
    <p><date when="2012-09-06" calendar="http://en.wikipedia.org/wiki/Gregorian_calendar"/></p>
  </div>
</egXML>
        
        Now we commit the change to git, and Jenkins will start building. The build should fail, and it does. If we now go to the Jenkins workspace on one of our two build servers:
        
        <list>
          <item><ref target="https://jenkins.tei-c.org/job/TEIP5-Test-dev/ws/P5/Test/">https://jenkins.tei-c.org/job/TEIP5-Test-dev/ws/P5/Test/</ref></item>
          <item><ref target="https://jenkins2.tei-c.org/job/TEIP5-Test-dev/ws/P5/Test/">https://jenkins2.tei-c.org/job/TEIP5-Test-dev/ws/P5/Test/</ref></item>
        </list>

        we'll see a file called <ident>detest.log</ident>, and if we look inside it, we'll find this bit, generated by our constraint:
        
        <q>@calendar indicates the system or calendar to which the date represented by the content of this element belongs, but this element has no textual content. (string-length(.) gt 0)</q>
        
        This line is obviously missing from <ident>expected-results/detest.log</ident>, so the build failed when the two files were compared. We can fix that very simply:
        
        <list>
          <item>Download the <ident>detest.log</ident> file from the TEIP5-Test workspace on the Jenkins server (<ident>job/TEIP5-Test/ws/Test/</ident>).</item>
          <item>Copy its contents into our local file <ident>expected-results/detest.log</ident>.</item>
          <item>Commit this change to git (git commit followed by git push).</item>
          <item>Watch Jenkins build P5-Test again, and make sure it completes successfully.</item>
        </list>
        </p>
          
    
        
      </div>

<div xml:id="release">
<head>Building the release</head>

<p>Note: the original content of this section has been removed, because a longer document dedicated to 
   documenting the release process has been created. Please refer to <ref target="http://www.tei-c.org/Activities/Council/Working/tcw22.xml">TCW22: Building a TEI Release</ref>.</p>

<!-- Content deleted by mholmes 2012-02-13. -->
</div>


      <div>
        <head>Reference section</head>
        <div xml:id="chaptercodes">
          <head>Chapter codes</head>
<p>Following a lengthy debate in the Council as to whether the
two-character codes originally used to identify individual chapters 
should be dropped in favour of longer more human-readable names, a
compromise solution was reached in which the two character codes were
retained as prefixes to longer human-readable names. The same
two-character codes are also used to identify the HTML and PDF files
generated during the release process.</p>
<p>The following
table shows the correspondence between the printed organization of the
Guidelines and the corresponding filenames. The order is determined by the
driver file <ident>Source/guidelines-xx.xml</ident>, from which the
table is derived.
<table>
<row role="label"><cell>Section</cell><cell>Title</cell><cell>filename</cell></row>
<row>
<cell>[i]</cell><cell>Releases of the TEI Guidelines</cell>
<cell>TitlePageVerso.xml</cell></row>
<row>
<cell>[ii]</cell><cell>Dedication</cell>
<cell>Dedication.xml</cell></row>
<row>
<cell>[iii]</cell><cell>Preface and Acknowledgments</cell>
<cell>FM1-IntroductoryNote.xml</cell></row>
<row>
<cell>[iv]</cell><cell>About These Guidelines</cell>
<cell>AB-About.xml</cell></row>
<row>
<cell>[v]</cell><cell>A Gentle Introduction to XML</cell>
<cell>SG-GentleIntroduction.xml</cell></row>
<row>
<cell>[vi]</cell><cell>Languages and Character Sets</cell>
<cell>CH-LanguagesCharacterSets.xml</cell></row>
<row>
<cell>[1]</cell><cell>The TEI Infrastructure</cell>
<cell>ST-Infrastructure.xml</cell></row>
<row>
<cell>[2]</cell><cell>The TEI Header</cell>
<cell>HD-Header.xml</cell></row>
<row>
<cell>[3]</cell><cell>Elements Available in All TEI Documents</cell>
<cell>CO-CoreElements.xml</cell></row>
<row>
<cell>[4]</cell><cell>Default Text Structure</cell>
<cell>DS-DefaultTextStructure.xml</cell></row>
<row>
<cell>[5]</cell><cell>Representation of Non-standard Characters and
Glyphs</cell><cell>WD-NonStandardCharacters.xml</cell>
</row>
<row>
<cell>[6]</cell><cell>Verse</cell><cell>VE-Verse.xml</cell>
</row>
<row>
<cell>[7]</cell><cell>Performance Texts</cell>
<cell>DR-PerformanceTexts.xml</cell></row>
<row>
<cell>[8]</cell><cell>Transcriptions of Speech</cell>
<cell>TS-TranscriptionsofSpeech.xml</cell></row>
<row>
<cell>[9]</cell><cell>Dictionaries</cell>
<cell>DI-PrintDictionaries.xml</cell></row>
<row>
<cell>[10]</cell><cell>Manuscript Description</cell>
<cell>MS-ManuscriptDescription.xml</cell></row>
<row>
<cell>[11]</cell><cell>Representation of Primary Sources</cell>
<cell>PH-PrimarySources.xml</cell></row>
<row>
<cell>[12]</cell><cell>Critical Apparatus</cell>
<cell>TC-CriticalApparatus.xml</cell></row>
<row>
<cell>[13]</cell><cell>Names, Dates, People, and Places</cell>
<cell>ND-NamesDates.xml</cell></row>
<row>
<cell>[14]</cell><cell>Tables, Formulæ, and Graphics</cell>
<cell>FT-TablesFormulaeGraphics.xml</cell></row>
<row>
<cell>[15]</cell><cell>Language Corpora</cell>
<cell>CC-LanguageCorpora.xml</cell></row>
<row>
<cell>[16]</cell><cell>Linking, Segmentation, and Alignment</cell>
<cell>SA-LinkingSegmentationAlignment.xml</cell></row>
<row>
<cell>[17]</cell><cell>Simple Analytic Mechanisms</cell>
<cell>AI-AnalyticMechanisms.xml</cell></row>
<row>
<cell>[18]</cell><cell>Feature Structures</cell>
<cell>FS-FeatureStructures.xml</cell></row>
<row>
<cell>[19]</cell><cell>Graphs, Networks, and Trees</cell>
<cell>GD-GraphsNetworksTrees.xml</cell></row>
<row>
<cell>[20]</cell><cell>Non-hierarchical Structures</cell>
<cell>NH-Non-hierarchical.xml</cell></row>
<row>
<cell>[21]</cell><cell>Certainty, Precision, and Responsibility</cell>
<cell>CE-CertaintyResponsibility.xml</cell></row>
<row>
<cell>[22]</cell><cell>Documentation Elements</cell>
<cell>TD-DocumentationElements.xml</cell></row>
<row>
<cell>[23]</cell><cell>Using the TEI</cell>
<cell>USE.xml</cell></row>
<row>
<cell>[A1]</cell><cell>Model Classes</cell>
<cell>REF-CLASSES-MODEL.xml</cell></row>
<row>
<cell>[A2]</cell><cell>Attribute Classes</cell>
<cell>REF-CLASSES-ATTS.xml</cell></row>
<row>
<cell>[A3]</cell><cell>Elements</cell>
<cell>REF-ELEMENTS.xml</cell></row>
<row>
<cell>[A4]</cell><cell>Attributes</cell>
<cell>REF-ATTRIBUTES.xml</cell></row>
<row>
<cell>[A5]</cell><cell>Datatypes and Other Macros</cell>
<cell>REF-MACROS.xml</cell></row>
<row>
<cell>[A6]</cell><cell>Bibliography</cell>
<cell>BIB-Bibliography.xml</cell></row>
<row>
<cell>[A7]</cell><cell>Prefatory Notes</cell>
<cell>PrefatoryNote.xml</cell></row>
<row>
<cell>[A8]</cell><cell>Colophon</cell>
<cell>COL-Colophon.xml</cell></row></table>
</p>
<p>In most chapters, the two character code is also used as a prefix
for the <att>xml:id</att> values given to each <gi>div</gi>
element. Note that every <gi>div</gi> element carries an
<att>xml:id</att> value, whether or not it is actually referenced
explicitly elewhere in the Guidelines.
</p>
<p>Note that files with names beginning <code>REF</code> contain
only <gi>divGen</gi> elements: their content, which provides the
reference documentation (sections A1 to A5 inclusive), is
automatically generated during the build process.</p>
  </div>
        <div>
          <head>Naming conventions</head>
          <p>TEI naming conventions have evolved over time, but remain fairly consistent. </p>
          <list type="gloss">
            <label>generic identifiers</label>
            <item>An element and attribute identifiers should be a single natural language word in
              lowercase if possible. If more than one word is conjoined to form a name, then the
              first letter of the second and any subsequent word should be uppercased. Hyphens,
              underscores, dots etc are not used within element or attribute names. </item>
            <label>class names</label>
            <item>Class names are made up three parts: a name, constructed like an element name,
              with a prefix and optionally a suffix. The prefix is one of <code>model.</code> or
                <code>att.</code> and indicates whether this is a model or an attribute class. The
              suffix, if present, is used to indicate subclassing: for example
                <ident>att.linking.foo</ident> is the <ident>foo</ident> subclass of the attribute
              class <ident>att.linking</ident></item>
            <label>xml:id values</label>
            <item>The conventions for these vary somewhat. Most of the older chapters of the
              guidelines have consistently constructed identifiers, derived from the individual
              section headings. Identifiers must be provided for:<list>
                <item>every <gi>div</gi>, whether or not it is explicitly linked to elsewhere</item>
                <item>every bibliographic reference in the <ident>BIB-Bibliography.xml</ident> file</item>
              </list></item>
          </list>
        </div>
<div xml:id="fileOrg"><head>File release structure</head>
<p>
Currently, the organisation of the <code>/usr/share/xml/tei</code> and
<code>/usr/share/doc/tei-*</code> directories on the TEI web site is
as follows:
<eg>
tei
|-- Test
|-- custom
|   |-- odd
|   |-- schema
|   |   |-- dtd
|   |   |-- relaxng
|   |   `-- xsd
|   `-- templates
|-- odd
|   |-- Exemplars
|   |-- ReleaseNotes
|   |-- Source
|   |   |-- Guidelines
|   |   |   |-- en
|   |   |   |   `-- Images
|   |   |   `-- fr
|   |   |       `-- Images
|   |   |-- Images
|   |   `-- Specs
|   |       |-- 18decembre
|   |       `-- exemples
|   |-- Utilities
|   `-- webnav
|       `-- icons
|-- schema
|   |-- dtd
|   `-- relaxng
|-- stylesheet
|   |-- common
|   |-- common2
|   |-- docx
|   |   |-- from
|   |   |   |-- dynamic
|   |   |   |   `-- tests
|   |   |   |       `-- xspec
|   |   |   |-- graphics
|   |   |   |-- lists
|   |   |   |-- marginals
|   |   |   |-- maths
|   |   |   |-- paragraphs
|   |   |   |-- pass0
|   |   |   |-- pass2
|   |   |   |-- tables
|   |   |   |-- templates
|   |   |   |-- textruns
|   |   |   |-- utils
|   |   |   `-- wordsections
|   |   |-- misc
|   |   |-- to
|   |   |   |-- docxfiles
|   |   |   |-- drama
|   |   |   |-- dynamic
|   |   |   |-- graphics
|   |   |   |-- lists
|   |   |   |-- maths
|   |   |   |-- templates
|   |   |   `-- wordsections
|   |   `-- utils
|   |       |-- graphics
|   |       |-- identity
|   |       |-- maths
|   |       `-- verbatim
|   |-- epub
|   |-- fo
|   |-- fo2
|   |-- html
|   |-- latex
|   |-- latex2
|   |-- nlm
|   |-- odds
|   |-- odds2
|   |-- oo
|   |-- profiles
|   |   |-- bodley
|   |   |   `-- epub
|   |   |-- default
|   |   |   |-- csv
|   |   |   |-- docbook
|   |   |   |-- docx
|   |   |   |-- dtd
|   |   |   |-- epub
|   |   |   |-- fo
|   |   |   |-- html
|   |   |   |-- latex
|   |   |   |-- lite
|   |   |   |-- oddhtml
|   |   |   |-- oo
|   |   |   |-- p4
|   |   |   `-- relaxng
|   |   |-- enrich
|   |   |   |-- docx
|   |   |   |-- fo
|   |   |   |-- html
|   |   |   `-- latex
|   |   |-- iso
|   |   |   |-- docx
|   |   |   |   `-- model
|   |   |   |-- epub
|   |   |   |-- fo
|   |   |   |-- html
|   |   |   |-- latex
|   |   |   |-- schema
|   |   |   `-- tbx
|   |   |-- ota
|   |   |   |-- epub
|   |   |   `-- html
|   |   |-- oucs
|   |   |   |-- docx
|   |   |   |-- epub
|   |   |   `-- p4
|   |   |-- oucscourses
|   |   |   `-- docx
|   |   |-- podcasts
|   |   |   |-- docx
|   |   |   `-- epub
|   |   `-- tei
|   |       `-- epub
|   |-- slides
|   |-- slides2
|   |-- tite
|   |-- tools2
|   |-- xhtml
|   `-- xhtml2
`-- xquery

</eg>
</p></div>

      </div>
    </body>
<back>
<div type="appendix">
<head>Some other (mostly superceded) documents on the topic</head>

<listBibl>
 <bibl><idno>TEI ED W9</idno>
<title>Points of Style For Drafts of TEI Guidelines</title>
<date>2 Mar 1990</date>
<ref target="http://www.tei-c.org/Vault/ED/edw09.gml">in Waterloo Script format</ref>
</bibl>

<bibl>
<title>Notes on House Style</title>
<idno>TEI ED W11</idno>
<date>14 Sep 1992</date>
<ref target="http://www.tei-c.org/Vault/ED/edw11.gml">in Waterloo script</ref>
<ref target="http://www.tei-c.org/Vault/ED/edw11.txt">formatted text</ref>
</bibl>


 <bibl><idno>TEI ED W55</idno>
<title>Form for Draft Chapters of the TEI Guidelines</title>
<date>5 june 1996</date>
<ref target="http://www.tei-c.org/Vault/ED/edw55.tei">in TEI P2 format</ref>
<ref target="http://www.tei-c.org/Vault/ED/edw55.htm">in HTML format</ref>
<ref target="http://www.tei-c.org/Vault/ED/edw55.odd">in ODD format</ref>
</bibl>

 <bibl><idno>TEI ED W57</idno>
<title>Procedures for Correcting Errors in the TEI Guidelines</title>
<date>July 23, 1994</date>
<ref target="http://www.tei-c.org/Vault/ED/edw57.tei">in TEI P2 format</ref>
<ref target="http://www.tei-c.org/Vault/ED/edw57.htm">in HTML format</ref>
</bibl>

</listBibl>
</div>
</back>  </text>
</TEI>
